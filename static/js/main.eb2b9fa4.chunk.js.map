{"version":3,"sources":["reducers/getMessages.js","reducers/rootReducers.js","store.js","components/SendMessage.js","components/Messages/Messages.js","components/Header.js","components/layout.js","components/App.js","actions/messagesAction.js","serviceWorker.js","index.js"],"names":["initialState","match","item","i","id","combineReducers","messages","state","arguments","length","undefined","action","type","data","JSON","parse","payload","some","unshift","apply","Object","toConsumableArray","concat","socket","WebSocket","SendMessage","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","send","nickName","localStorage","getItem","message","from","text","document","getElementsByClassName","value","stringify","react_default","a","createElement","es_button","onClick","Component","Messages","messageRender","time","moment","fromNow","key","row","className","col","style","maxWidth","display","divider","locale","props","map","connect","Header","changeNickName","e","setItem","handleChange","console","log","Option","Select","layout","span","input","placeholder","es_select","defaultValue","width","onChange","Footer","Layout","Layer","_ref","children","components_Header","textAlign","App","startSocket","onopen","onmessage","getMessages","onclose","setTimeout","Content","TextArea","Input","components_layout","padding","background","minHeight","components_Messages_Messages","gutter","marginTop","autosize","minRows","maxRows","components_SendMessage","dispatch","Boolean","window","location","hostname","ReactDOM","render","react_redux_es","store","createStore","compose","applyMiddleware","thunk","devToolsExtension","f","components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb2b9fa4.chunk.js","sourcesContent":["let initialState = [];\r\n\r\nconst match = (item, i) => {\r\n  if (initialState[i]) {\r\n    return item.id !== initialState[i].id\r\n  } else return true;\r\n}\r\n\r\nexport const getMessages = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'MESSAGES_ACTION':\r\n      const data = JSON.parse(action.payload);\r\n      const checker = data.some(match);\r\n      if (checker) {\r\n        initialState.unshift(...data);\r\n      }\r\n      return [...initialState];\r\n    default: return state;\r\n  }\r\n}","import { combineReducers } from 'redux'\r\nimport { getMessages } from './getMessages';\r\n\r\nexport default combineReducers({\r\n  messages: getMessages,\r\n})","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport combineReducers from './reducers/rootReducers';\r\nimport thunk from 'redux-thunk';\r\n\r\nexport default function configureStore(initialState) {\r\n  return createStore(\r\n    combineReducers,\r\n    initialState,\r\n    compose(\r\n      applyMiddleware(thunk),\r\n      window.devToolsExtension ? window.devToolsExtension() : f => f\r\n    )\r\n  );\r\n}","import React, { Component } from 'react';\r\nimport { Button } from 'antd';\r\nconst socket = new WebSocket('ws://st-chat.shas.tel');\r\n\r\nclass SendMessage extends Component {\r\n  constructor() {\r\n    super();\r\n    this.message = {\r\n      from: '',\r\n      message: '',\r\n    }\r\n  }\r\n\r\n  send = () => {\r\n    const nickName = JSON.parse(localStorage.getItem('nickName'));\r\n    if (nickName) {\r\n      this.message.from = nickName;\r\n    } else {\r\n      this.message.from = 'anonymus';\r\n    }\r\n\r\n    const text = document.getElementsByClassName('text-of-message')[0];\r\n    this.message.message = text.value;\r\n    socket.send(JSON.stringify(this.message));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Button onClick={this.send} type=\"primary\">Send</Button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SendMessage;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { Divider, Row, Col } from 'antd';\r\nimport moment from 'moment';\r\nimport 'moment/locale/ru'\r\nimport './messages.css';\r\nclass Messages extends Component {\r\n\r\n  messageRender = (item) => {\r\n    const nickName = JSON.parse(localStorage.getItem('nickName'));\r\n    let id = item.id;\r\n    if (item.from === nickName) {\r\n      id = 'personal-message';\r\n    }\r\n    const time = moment(item.time).fromNow();\r\n    return (\r\n      <div id={id} key={item.id}>\r\n        <Row className='message-block'>\r\n          <Row>\r\n            <Col className='author'>\r\n              {item.from}\r\n            </Col>\r\n            <Col className='time'>\r\n              {time}\r\n            </Col>\r\n          </Row>\r\n          <Row\r\n            style={{\r\n              maxWidth: '55%',\r\n              display: 'inline-block'\r\n            }}>\r\n            <Col className='message'>\r\n              {item.message}\r\n            </Col>\r\n          </Row>\r\n        </Row>\r\n        <Divider />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    moment.locale('ru');\r\n    const { messages } = this.props;\r\n    return (\r\n      <div className='messages'>\r\n        <Divider />\r\n        {messages.map(this.messageRender)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    messages: state.messages,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Messages);","import React, { Component } from \"react\";\r\nimport { Layout, Input, Row, Col, Button } from 'antd';\r\nimport { Select } from 'antd';\r\n\r\nclass Header extends Component {\r\n\r\n  changeNickName = (e) => {\r\n    const nickName = document.getElementsByClassName('input-nickname-field')[0].value;\r\n    localStorage.setItem('nickName', JSON.stringify(nickName));\r\n  }\r\n\r\n  handleChange = (value) => {\r\n    console.log(`selected ${value}`);\r\n  }\r\n  render() {\r\n    const { Option } = Select;\r\n    return (\r\n      <div>\r\n        <Layout.Header>\r\n          <Row>\r\n            <Col span={4}>\r\n              <Input className=\"input-nickname-field\" placeholder=\"nickName\"/>\r\n            </Col>\r\n            <Col span={10}>\r\n              <Button type=\"primary\" onClick={this.changeNickName}>Confirm</Button>\r\n              <Select defaultValue=\"lucy\" style={{ width: 120 }} onChange={this.handleChange}>\r\n                <Option value=\"jack\">Jack</Option>\r\n                <Option value=\"lucy\">Lucy</Option>\r\n                <Option value=\"Yiminghe\">yiminghe</Option>\r\n              </Select>\r\n            </Col>\r\n          </Row>\r\n        </Layout.Header>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from './Header';\r\nimport { Layout } from 'antd';\r\n\r\nconst { Footer } = Layout;\r\nconst Layer = ({ children }) => (\r\n  <div>\r\n    <Layout className=\"layout\">\r\n      <Header/>\r\n      <main>{children}</main>\r\n      <Footer style={{ textAlign: 'center' }}>Ant Design ©2019 Created by Georg Pandeh Fumani</Footer>\r\n    </Layout>\r\n  </div>\r\n);\r\n\r\nexport default Layer;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { messagesAction } from '../actions/messagesAction';\r\nimport { Input, Layout, Row, Col } from 'antd';\r\nimport SendMessage from './SendMessage';\r\nimport Messages from './Messages/Messages';\r\nimport Layer from './layout';\r\n\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n    }\r\n    this.nickName = '';\r\n  }\r\n  \r\n  // function connect() {\r\n  //   var ws = new WebSocket('ws://localhost:8080');\r\n  //   ws.onopen = function() {\r\n  //     console.log('open')\r\n  //   };\r\n  \r\n  //   ws.onmessage = function(e) {\r\n  //     console.log('Message:', e.data);\r\n  //   };\r\n  \r\n  //   ws.onclose = function(e) {\r\n  //     console.log('Socket is closed. Reconnect will be attempted in 1 second.', e.reason);\r\n  //     setTimeout(function() {\r\n  //       connect();\r\n  //     }, 1000);\r\n  //   };\r\n  \r\n  //   ws.onerror = function(err) {\r\n  //     console.error('Socket encountered error: ', err.message, 'Closing socket');\r\n  //     ws.close();\r\n  //   };\r\n  // }\r\n  \r\n  // connect();\r\n\r\n  startSocket = () => {\r\n    const socket = new WebSocket('ws://st-chat.shas.tel');\r\n    socket.onopen = () => {\r\n      console.log('WebSocket Client Connected');\r\n    };\r\n\r\n    socket.onmessage = ({ data }) => {\r\n      this.props.getMessages(data);\r\n    };\r\n\r\n    socket.onclose = () => {\r\n      console.log('close');\r\n      setTimeout(() => {\r\n        this.startSocket();\r\n      }, 1000);\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.startSocket();\r\n  }\r\n\r\n  render() {\r\n    const { Content } = Layout;\r\n    const { TextArea } = Input;\r\n\r\n    return (\r\n      <div>\r\n        <Layer>\r\n          <Content style={{ padding: '0 50px', background: '#f5f5f5' }}>\r\n            <div style={{ background: '#fff', padding: 24, minHeight: 280 }}>\r\n              <Messages />\r\n              <Row gutter={24} style={{ marginTop: '20px' }}>\r\n                <Col span={20}>\r\n                  <TextArea\r\n                    className='text-of-message'\r\n                    placeholder=\"input you message\"\r\n                    autosize={{ minRows: 1, maxRows: 6 }}\r\n                  />\r\n                </Col>\r\n                <Col span={4}>\r\n                  <SendMessage/>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n          </Content>\r\n        </Layer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return (\r\n    state\r\n  )\r\n}\r\nconst mapDispatchToProps = dispatch => ({\r\n  getMessages: (data) => dispatch(messagesAction(data)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","export const messagesAction = (messages) => ({\r\n  type: 'MESSAGES_ACTION',\r\n  payload: messages,\r\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport configureStore from './store';\nimport App from './components/App';\nimport { Provider } from 'react-redux'\nimport 'antd/dist/antd.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={configureStore({})}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister();\n"],"sourceRoot":""}